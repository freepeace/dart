// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class rust_panic {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  rust_panic(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  rust_panic.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __ExceptionPtrCreate(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return ___ExceptionPtrCreate(
      arg0,
    );
  }

  late final ___ExceptionPtrCreatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '__ExceptionPtrCreate');
  late final ___ExceptionPtrCreate = ___ExceptionPtrCreatePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void __ExceptionPtrDestroy(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return ___ExceptionPtrDestroy(
      arg0,
    );
  }

  late final ___ExceptionPtrDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '__ExceptionPtrDestroy');
  late final ___ExceptionPtrDestroy = ___ExceptionPtrDestroyPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void __ExceptionPtrCopy(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return ___ExceptionPtrCopy(
      arg0,
      arg1,
    );
  }

  late final ___ExceptionPtrCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('__ExceptionPtrCopy');
  late final ___ExceptionPtrCopy = ___ExceptionPtrCopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void __ExceptionPtrAssign(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return ___ExceptionPtrAssign(
      arg0,
      arg1,
    );
  }

  late final ___ExceptionPtrAssignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('__ExceptionPtrAssign');
  late final ___ExceptionPtrAssign = ___ExceptionPtrAssignPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  bool __ExceptionPtrCompare(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return ___ExceptionPtrCompare(
          arg0,
          arg1,
        ) !=
        0;
  }

  late final ___ExceptionPtrComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('__ExceptionPtrCompare');
  late final ___ExceptionPtrCompare = ___ExceptionPtrComparePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  bool __ExceptionPtrToBool(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return ___ExceptionPtrToBool(
          arg0,
        ) !=
        0;
  }

  late final ___ExceptionPtrToBoolPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
          '__ExceptionPtrToBool');
  late final ___ExceptionPtrToBool = ___ExceptionPtrToBoolPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void __ExceptionPtrSwap(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return ___ExceptionPtrSwap(
      arg0,
      arg1,
    );
  }

  late final ___ExceptionPtrSwapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('__ExceptionPtrSwap');
  late final ___ExceptionPtrSwap = ___ExceptionPtrSwapPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void __ExceptionPtrCurrentException(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return ___ExceptionPtrCurrentException(
      arg0,
    );
  }

  late final ___ExceptionPtrCurrentExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '__ExceptionPtrCurrentException');
  late final ___ExceptionPtrCurrentException =
      ___ExceptionPtrCurrentExceptionPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void __ExceptionPtrRethrow(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return ___ExceptionPtrRethrow(
      arg0,
    );
  }

  late final ___ExceptionPtrRethrowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '__ExceptionPtrRethrow');
  late final ___ExceptionPtrRethrow = ___ExceptionPtrRethrowPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void __ExceptionPtrCopyException(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return ___ExceptionPtrCopyException(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___ExceptionPtrCopyExceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('__ExceptionPtrCopyException');
  late final ___ExceptionPtrCopyException =
      ___ExceptionPtrCopyExceptionPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<__type_info_node> ___type_info_root_node =
      _lookup<__type_info_node>('__type_info_root_node');

  ffi.Pointer<__type_info_node> get __type_info_root_node =>
      ___type_info_root_node;

  _locale_t _GetLocaleForCP(
    int arg0,
  ) {
    return __GetLocaleForCP(
      arg0,
    );
  }

  late final __GetLocaleForCPPtr =
      _lookup<ffi.NativeFunction<_locale_t Function(ffi.Uint32)>>(
          '_GetLocaleForCP');
  late final __GetLocaleForCP =
      __GetLocaleForCPPtr.asFunction<_locale_t Function(int)>();
}

abstract class ISA_AVAILABILITY {
  static const int __ISA_AVAILABLE_X86 = 0;
  static const int __ISA_AVAILABLE_SSE2 = 1;
  static const int __ISA_AVAILABLE_SSE42 = 2;
  static const int __ISA_AVAILABLE_AVX = 3;
  static const int __ISA_AVAILABLE_ENFSTRG = 4;
  static const int __ISA_AVAILABLE_AVX2 = 5;
  static const int __ISA_AVAILABLE_AVX512 = 6;
  static const int __ISA_AVAILABLE_ARMNT = 0;
  static const int __ISA_AVAILABLE_NEON = 1;
  static const int __ISA_AVAILABLE_NEON_ARM64 = 2;
}

class __type_info_node extends ffi.Opaque {}

typedef _locale_t = ffi.Pointer<__crt_locale_pointers>;

class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

class __crt_locale_data extends ffi.Opaque {}

class __crt_multibyte_data extends ffi.Opaque {}

const int _STL_COMPILER_PREPROCESSOR = 1;

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_NODISCARD = 1;

const int _HAS_CXX23 = 0;

const int _STL_WARNING_LEVEL = 3;

const int _HAS_CONDITIONAL_EXPLICIT = 1;

const int _STL_DISABLED_WARNING_C4984 = 4984;

const int _STL_DISABLED_WARNING_C5053 = 5053;

const int _STL_DISABLED_WARNINGS = 4180;

const int _CPPLIB_VER = 650;

const int _MSVC_STL_VERSION = 142;

const int _MSVC_STL_UPDATE = 202104;

const int _HAS_STATIC_RTTI = 1;

const int _HAS_AUTO_PTR_ETC = 1;

const int _HAS_UNEXPECTED = 1;

const int _HAS_OLD_IOSTREAMS_MEMBERS = 1;

const int _HAS_STD_BYTE = 0;

const int _HAS_FUNCTION_ALLOCATOR_SUPPORT = 1;

const int _HAS_TR1_NAMESPACE = 1;

const int _ENFORCE_MATCHING_ALLOCATORS = 0;

const int _ENFORCE_FACET_SPECIALIZATIONS = 0;

const String _FACET_SPECIALIZATION_MESSAGE =
    'Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 to suppress this diagnostic.';

const int _STL_OPTIMIZE_SYSTEM_ERROR_OPERATORS = 1;

const int _STD_VECTORIZE_WITH_FLOAT_CONTROL = 1;

const int _HAS_FEATURES_REMOVED_IN_CXX20 = 1;

const int _HAS_DEPRECATED_ADAPTOR_TYPEDEFS = 1;

const int _HAS_DEPRECATED_ALLOCATOR_MEMBERS = 1;

const int _HAS_DEPRECATED_IS_LITERAL_TYPE = 1;

const int _HAS_DEPRECATED_NEGATORS = 1;

const int _HAS_DEPRECATED_RAW_STORAGE_ITERATOR = 1;

const int _HAS_DEPRECATED_RESULT_OF = 1;

const int _HAS_DEPRECATED_SHARED_PTR_UNIQUE = 1;

const int _HAS_DEPRECATED_TEMPORARY_BUFFER = 1;

const int _HAS_DEPRECATED_UNCAUGHT_EXCEPTION = 1;

const int _HAS_STREAM_INSERTION_OPERATORS_DELETED_IN_CXX20 = 1;

const int __cpp_lib_chrono_udls = 201304;

const int __cpp_lib_complex_udls = 201309;

const int __cpp_lib_exchange_function = 201304;

const int __cpp_lib_generic_associative_lookup = 201304;

const int __cpp_lib_integer_sequence = 201304;

const int __cpp_lib_integral_constant_callable = 201304;

const int __cpp_lib_is_final = 201402;

const int __cpp_lib_is_null_pointer = 201309;

const int __cpp_lib_make_reverse_iterator = 201402;

const int __cpp_lib_make_unique = 201304;

const int __cpp_lib_null_iterators = 201304;

const int __cpp_lib_quoted_string_io = 201304;

const int __cpp_lib_result_of_sfinae = 201210;

const int __cpp_lib_robust_nonmodifying_seq_ops = 201304;

const int __cpp_lib_shared_timed_mutex = 201402;

const int __cpp_lib_string_udls = 201304;

const int __cpp_lib_transformation_trait_aliases = 201304;

const int __cpp_lib_tuple_element_t = 201402;

const int __cpp_lib_tuples_by_type = 201304;

const int __cpp_lib_addressof_constexpr = 201603;

const int __cpp_lib_allocator_traits_is_always_equal = 201411;

const int __cpp_lib_as_const = 201510;

const int __cpp_lib_bool_constant = 201505;

const int __cpp_lib_enable_shared_from_this = 201603;

const int __cpp_lib_incomplete_container_elements = 201505;

const int __cpp_lib_invoke = 201411;

const int __cpp_lib_logical_traits = 201510;

const int __cpp_lib_map_try_emplace = 201411;

const int __cpp_lib_nonmember_container_access = 201411;

const int __cpp_lib_shared_mutex = 201505;

const int __cpp_lib_transparent_operators = 201510;

const int __cpp_lib_type_trait_variable_templates = 201510;

const int __cpp_lib_uncaught_exceptions = 201411;

const int __cpp_lib_unordered_map_try_emplace = 201411;

const int __cpp_lib_void_t = 201411;

const int __cpp_lib_atomic_value_initialization = 201911;

const int __cpp_lib_chrono = 201510;

const int __cpp_lib_shared_ptr_arrays = 201611;

const int __cpp_lib_experimental_erase_if = 201411;

const int __cpp_lib_experimental_filesystem = 201406;

const int _STL_WIN32_WINNT_WINXP = 1281;

const int _STL_WIN32_WINNT_VISTA = 1536;

const int _STL_WIN32_WINNT_WIN8 = 1538;

const int _STL_WIN32_WINNT_WINBLUE = 1539;

const int _STL_WIN32_WINNT_WIN10 = 2560;

const int _STL_WIN32_WINNT = 1536;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 't';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const int _DOMAIN = 1;

const int _SING = 2;

const int _OVERFLOW = 3;

const int _UNDERFLOW = 4;

const int _TLOSS = 5;

const int _PLOSS = 6;

const double _HUGE_ENUF = 1e+300;

const double INFINITY = double.infinity;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double NAN = double.nan;

const int _DENORM = -2;

const int _FINITE = -1;

const int _INFCODE = 1;

const int _NANCODE = 2;

const int FP_INFINITE = 1;

const int FP_NAN = 2;

const int FP_NORMAL = -1;

const int FP_SUBNORMAL = -2;

const int FP_ZERO = 0;

const int _C2 = 1;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = 2147483647;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const int math_errhandling = 3;

const int _FE_DIVBYZERO = 4;

const int _FE_INEXACT = 32;

const int _FE_INVALID = 1;

const int _FE_OVERFLOW = 8;

const int _FE_UNDERFLOW = 16;

const int _D0_C = 3;

const int _D1_C = 2;

const int _D2_C = 1;

const int _D3_C = 0;

const int _DBIAS = 1022;

const int _DOFF = 4;

const int _F0_C = 1;

const int _F1_C = 0;

const int _FBIAS = 126;

const int _FOFF = 7;

const int _FRND = 1;

const int _L0_C = 3;

const int _L1_C = 2;

const int _L2_C = 1;

const int _L3_C = 0;

const int _LBIAS = 1022;

const int _LOFF = 4;

const int _DFRAC = 15;

const int _DMASK = 32752;

const int _DMAX = 2047;

const int _DSIGN = 32768;

const int _FFRAC = 127;

const int _FMASK = 32640;

const int _FMAX = 255;

const int _FSIGN = 32768;

const int _LFRAC = 65535;

const int _LMASK = 32767;

const int _LMAX = 32767;

const int _LSIGN = 32768;

const int _DHUGE_EXP = 1842;

const int _FHUGE_EXP = 229;

const int _LHUGE_EXP = 29490;

const int _FP_LT = 1;

const int _FP_EQ = 2;

const int _FP_GT = 4;

const int DOMAIN = 1;

const int SING = 2;

const int OVERFLOW = 3;

const int UNDERFLOW = 4;

const int TLOSS = 5;

const int PLOSS = 6;

const int _MAX_ITOSTR_BASE16_COUNT = 9;

const int _MAX_ITOSTR_BASE10_COUNT = 12;

const int _MAX_ITOSTR_BASE8_COUNT = 12;

const int _MAX_ITOSTR_BASE2_COUNT = 33;

const int _MAX_LTOSTR_BASE16_COUNT = 9;

const int _MAX_LTOSTR_BASE10_COUNT = 12;

const int _MAX_LTOSTR_BASE8_COUNT = 12;

const int _MAX_LTOSTR_BASE2_COUNT = 33;

const int _MAX_ULTOSTR_BASE16_COUNT = 9;

const int _MAX_ULTOSTR_BASE10_COUNT = 11;

const int _MAX_ULTOSTR_BASE8_COUNT = 12;

const int _MAX_ULTOSTR_BASE2_COUNT = 33;

const int _MAX_I64TOSTR_BASE16_COUNT = 17;

const int _MAX_I64TOSTR_BASE10_COUNT = 21;

const int _MAX_I64TOSTR_BASE8_COUNT = 23;

const int _MAX_I64TOSTR_BASE2_COUNT = 65;

const int _MAX_U64TOSTR_BASE16_COUNT = 17;

const int _MAX_U64TOSTR_BASE10_COUNT = 21;

const int _MAX_U64TOSTR_BASE8_COUNT = 23;

const int _MAX_U64TOSTR_BASE2_COUNT = 65;

const int CHAR_BIT = 8;

const int SCHAR_MIN = -128;

const int SCHAR_MAX = 127;

const int UCHAR_MAX = 255;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int MB_LEN_MAX = 5;

const int SHRT_MIN = -32768;

const int SHRT_MAX = 32767;

const int USHRT_MAX = 65535;

const int INT_MIN = -2147483648;

const int INT_MAX = 2147483647;

const int UINT_MAX = 4294967295;

const int LONG_MIN = -2147483648;

const int LONG_MAX = 2147483647;

const int ULONG_MAX = 4294967295;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int _I8_MIN = -128;

const int _I8_MAX = 127;

const int _UI8_MAX = 255;

const int _I16_MIN = -32768;

const int _I16_MAX = 32767;

const int _UI16_MAX = 65535;

const int _I32_MIN = -2147483648;

const int _I32_MAX = 2147483647;

const int _UI32_MAX = 4294967295;

const int _I64_MIN = -9223372036854775808;

const int _I64_MAX = 9223372036854775807;

const int _UI64_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int EXIT_SUCCESS = 0;

const int EXIT_FAILURE = 1;

const int _WRITE_ABORT_MSG = 1;

const int _CALL_REPORTFAULT = 2;

const int _OUT_TO_DEFAULT = 0;

const int _OUT_TO_STDERR = 1;

const int _OUT_TO_MSGBOX = 2;

const int _REPORT_ERRMODE = 3;

const int RAND_MAX = 32767;

const int _CVTBUFSIZE = 349;

const int _MAX_PATH = 260;

const int _MAX_DRIVE = 3;

const int _MAX_DIR = 256;

const int _MAX_FNAME = 256;

const int _MAX_EXT = 256;

const int _MAX_ENV = 32767;

const int _CRT_WARN = 0;

const int _CRT_ERROR = 1;

const int _CRT_ASSERT = 2;

const int _CRT_ERRCNT = 3;

const int _CRTDBG_MODE_FILE = 1;

const int _CRTDBG_MODE_DEBUG = 2;

const int _CRTDBG_MODE_WNDW = 4;

const int _CRTDBG_REPORT_MODE = -1;

const int _CRT_RPTHOOK_INSTALL = 0;

const int _CRT_RPTHOOK_REMOVE = 1;

const int _HOOK_ALLOC = 1;

const int _HOOK_REALLOC = 2;

const int _HOOK_FREE = 3;

const int _CRTDBG_ALLOC_MEM_DF = 1;

const int _CRTDBG_DELAY_FREE_MEM_DF = 2;

const int _CRTDBG_CHECK_ALWAYS_DF = 4;

const int _CRTDBG_RESERVED_DF = 8;

const int _CRTDBG_CHECK_CRT_DF = 16;

const int _CRTDBG_LEAK_CHECK_DF = 32;

const int _CRTDBG_CHECK_EVERY_16_DF = 1048576;

const int _CRTDBG_CHECK_EVERY_128_DF = 8388608;

const int _CRTDBG_CHECK_EVERY_1024_DF = 67108864;

const int _CRTDBG_CHECK_DEFAULT_DF = 0;

const int _CRTDBG_REPORT_FLAG = -1;

const int _FREE_BLOCK = 0;

const int _NORMAL_BLOCK = 1;

const int _CRT_BLOCK = 2;

const int _IGNORE_BLOCK = 3;

const int _CLIENT_BLOCK = 4;

const int _MAX_BLOCKS = 5;

const int _UNKNOWN_BLOCK = -1;

const String _CRT_MSVCP_CURRENT = 'msvcp140.dll';

const int _HAS_ITERATOR_DEBUGGING = 0;

const int _SECURE_SCL = 0;

const int _ITERATOR_DEBUG_LEVEL = 0;

const int _CONTAINER_DEBUG_LEVEL = 0;

const int _ENABLE_ATOMIC_REF_ALIGNMENT_CHECK = 0;

const int _MAX_EXP_DIG = 8;

const int _MAX_INT_DIG = 32;

const int _MAX_SIG_DIG_V1 = 36;

const int _MAX_SIG_DIG_V2 = 768;

const int _LOCK_LOCALE = 0;

const int _LOCK_MALLOC = 1;

const int _LOCK_STREAM = 2;

const int _LOCK_DEBUG = 3;

const int _LOCK_AT_THREAD_EXIT = 4;

const int _STD_ATOMIC_ALWAYS_USE_CMPXCHG16B = 0;

const String _CRT_INTERNAL_STDIO_SYMBOL_PREFIX = '';

const int _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION = 1;

const int _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR = 2;

const int _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS = 4;

const int _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY = 8;

const int _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS = 16;

const int _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING = 32;

const int _CRT_INTERNAL_SCANF_SECURECRT = 1;

const int _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS = 2;

const int _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY = 4;

const int WEOF = 65535;

const int BUFSIZ = 512;

const int _NFILE = 512;

const int _NSTREAM_ = 512;

const int _IOB_ENTRIES = 3;

const int EOF = -1;

const int _IOFBF = 0;

const int _IOLBF = 64;

const int _IONBF = 4;

const int L_tmpnam = 260;

const int L_tmpnam_s = 260;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_SET = 0;

const int FILENAME_MAX = 260;

const int FOPEN_MAX = 20;

const int _SYS_OPEN = 20;

const int TMP_MAX = 2147483647;

const int TMP_MAX_S = 2147483647;

const int _TMP_MAX_S = 2147483647;

const int SYS_OPEN = 20;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EAGAIN = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int EDEADLK = 36;

const int ENAMETOOLONG = 38;

const int ENOLCK = 39;

const int ENOSYS = 40;

const int ENOTEMPTY = 41;

const int EINVAL = 22;

const int ERANGE = 34;

const int EILSEQ = 42;

const int STRUNCATE = 80;

const int EDEADLOCK = 36;

const int EADDRINUSE = 100;

const int EADDRNOTAVAIL = 101;

const int EAFNOSUPPORT = 102;

const int EALREADY = 103;

const int EBADMSG = 104;

const int ECANCELED = 105;

const int ECONNABORTED = 106;

const int ECONNREFUSED = 107;

const int ECONNRESET = 108;

const int EDESTADDRREQ = 109;

const int EHOSTUNREACH = 110;

const int EIDRM = 111;

const int EINPROGRESS = 112;

const int EISCONN = 113;

const int ELOOP = 114;

const int EMSGSIZE = 115;

const int ENETDOWN = 116;

const int ENETRESET = 117;

const int ENETUNREACH = 118;

const int ENOBUFS = 119;

const int ENODATA = 120;

const int ENOLINK = 121;

const int ENOMSG = 122;

const int ENOPROTOOPT = 123;

const int ENOSR = 124;

const int ENOSTR = 125;

const int ENOTCONN = 126;

const int ENOTRECOVERABLE = 127;

const int ENOTSOCK = 128;

const int ENOTSUP = 129;

const int EOPNOTSUPP = 130;

const int EOTHER = 131;

const int EOVERFLOW = 132;

const int EOWNERDEAD = 133;

const int EPROTO = 134;

const int EPROTONOSUPPORT = 135;

const int EPROTOTYPE = 136;

const int ETIME = 137;

const int ETIMEDOUT = 138;

const int ETXTBSY = 139;

const int EWOULDBLOCK = 140;

const int _NLSCMPERROR = 2147483647;

const int _UPPER = 1;

const int _LOWER = 2;

const int _DIGIT = 4;

const int _SPACE = 8;

const int _PUNCT = 16;

const int _CONTROL = 32;

const int _BLANK = 64;

const int _HEX = 128;

const int _LEADBYTE = 32768;

const int _ALPHA = 259;

const int _SH_DENYRW = 16;

const int _SH_DENYWR = 32;

const int _SH_DENYRD = 48;

const int _SH_DENYNO = 64;

const int _SH_SECURE = 128;

const int SH_DENYRW = 16;

const int SH_DENYWR = 32;

const int SH_DENYRD = 48;

const int SH_DENYNO = 64;

const int _S_IFMT = 61440;

const int _S_IFDIR = 16384;

const int _S_IFCHR = 8192;

const int _S_IFIFO = 4096;

const int _S_IFREG = 32768;

const int _S_IREAD = 256;

const int _S_IWRITE = 128;

const int _S_IEXEC = 64;

const int S_IFMT = 61440;

const int S_IFDIR = 16384;

const int S_IFCHR = 8192;

const int S_IFREG = 32768;

const int S_IREAD = 256;

const int S_IWRITE = 128;

const int S_IEXEC = 64;

const int _USE_STD_VECTOR_ALGORITHMS = 1;

const int _HEAP_MAXREQ = -32;

const int _HEAPEMPTY = -1;

const int _HEAPOK = -2;

const int _HEAPBADBEGIN = -3;

const int _HEAPBADNODE = -4;

const int _HEAPEND = -5;

const int _HEAPBADPTR = -6;

const int _FREEENTRY = 0;

const int _USEDENTRY = 1;

const int _ALLOCA_S_THRESHOLD = 1024;

const int _ALLOCA_S_STACK_MARKER = 52428;

const int _ALLOCA_S_HEAP_MARKER = 56797;

const int _ALLOCA_S_MARKER_SIZE = 16;

const int FLT_EVAL_METHOD = 0;

const int DBL_DECIMAL_DIG = 17;

const int DBL_DIG = 15;

const double DBL_EPSILON = 2.220446049250313e-16;

const int DBL_HAS_SUBNORM = 1;

const int DBL_MANT_DIG = 53;

const double DBL_MAX = 1.7976931348623157e+308;

const int DBL_MAX_10_EXP = 308;

const int DBL_MAX_EXP = 1024;

const double DBL_MIN = 2.2250738585072014e-308;

const int DBL_MIN_10_EXP = -307;

const int DBL_MIN_EXP = -1021;

const int _DBL_RADIX = 2;

const double DBL_TRUE_MIN = 5e-324;

const int FLT_DECIMAL_DIG = 9;

const int FLT_DIG = 6;

const double FLT_EPSILON = 1.1920928955078125e-7;

const int FLT_HAS_SUBNORM = 1;

const int FLT_GUARD = 0;

const int FLT_MANT_DIG = 24;

const double FLT_MAX = 3.4028234663852886e+38;

const int FLT_MAX_10_EXP = 38;

const int FLT_MAX_EXP = 128;

const double FLT_MIN = 1.1754943508222875e-38;

const int FLT_MIN_10_EXP = -37;

const int FLT_MIN_EXP = -125;

const int FLT_NORMALIZE = 0;

const int FLT_RADIX = 2;

const double FLT_TRUE_MIN = 1.401298464324817e-45;

const int LDBL_DIG = 15;

const double LDBL_EPSILON = 2.220446049250313e-16;

const int LDBL_HAS_SUBNORM = 1;

const int LDBL_MANT_DIG = 53;

const double LDBL_MAX = 1.7976931348623157e+308;

const int LDBL_MAX_10_EXP = 308;

const int LDBL_MAX_EXP = 1024;

const double LDBL_MIN = 2.2250738585072014e-308;

const int LDBL_MIN_10_EXP = -307;

const int LDBL_MIN_EXP = -1021;

const int _LDBL_RADIX = 2;

const double LDBL_TRUE_MIN = 5e-324;

const int DECIMAL_DIG = 17;

const int _SW_INEXACT = 1;

const int _SW_UNDERFLOW = 2;

const int _SW_OVERFLOW = 4;

const int _SW_ZERODIVIDE = 8;

const int _SW_INVALID = 16;

const int _SW_DENORMAL = 524288;

const int _EM_AMBIGUIOUS = 2147483648;

const int _EM_AMBIGUOUS = 2147483648;

const int _MCW_EM = 524319;

const int _EM_INEXACT = 1;

const int _EM_UNDERFLOW = 2;

const int _EM_OVERFLOW = 4;

const int _EM_ZERODIVIDE = 8;

const int _EM_INVALID = 16;

const int _EM_DENORMAL = 524288;

const int _MCW_RC = 768;

const int _RC_NEAR = 0;

const int _RC_DOWN = 256;

const int _RC_UP = 512;

const int _RC_CHOP = 768;

const int _MCW_PC = 196608;

const int _PC_64 = 0;

const int _PC_53 = 65536;

const int _PC_24 = 131072;

const int _MCW_IC = 262144;

const int _IC_AFFINE = 262144;

const int _IC_PROJECTIVE = 0;

const int _MCW_DN = 50331648;

const int _DN_SAVE = 0;

const int _DN_FLUSH = 16777216;

const int _DN_FLUSH_OPERANDS_SAVE_RESULTS = 33554432;

const int _DN_SAVE_OPERANDS_FLUSH_RESULTS = 50331648;

const int _SW_UNEMULATED = 64;

const int _SW_SQRTNEG = 128;

const int _SW_STACKOVERFLOW = 512;

const int _SW_STACKUNDERFLOW = 1024;

const int _FPE_INVALID = 129;

const int _FPE_DENORMAL = 130;

const int _FPE_ZERODIVIDE = 131;

const int _FPE_OVERFLOW = 132;

const int _FPE_UNDERFLOW = 133;

const int _FPE_INEXACT = 134;

const int _FPE_UNEMULATED = 135;

const int _FPE_SQRTNEG = 136;

const int _FPE_STACKOVERFLOW = 138;

const int _FPE_STACKUNDERFLOW = 139;

const int _FPE_EXPLICITGEN = 140;

const int _FPE_MULTIPLE_TRAPS = 141;

const int _FPE_MULTIPLE_FAULTS = 142;

const int _FPCLASS_SNAN = 1;

const int _FPCLASS_QNAN = 2;

const int _FPCLASS_NINF = 4;

const int _FPCLASS_NN = 8;

const int _FPCLASS_ND = 16;

const int _FPCLASS_NZ = 32;

const int _FPCLASS_PZ = 64;

const int _FPCLASS_PD = 128;

const int _FPCLASS_PN = 256;

const int _FPCLASS_PINF = 512;

const int _CW_DEFAULT = 524319;

const int DBL_RADIX = 2;

const int LDBL_RADIX = 2;

const int EM_AMBIGUIOUS = 2147483648;

const int EM_AMBIGUOUS = 2147483648;

const int MCW_EM = 524319;

const int EM_INVALID = 16;

const int EM_DENORMAL = 524288;

const int EM_ZERODIVIDE = 8;

const int EM_OVERFLOW = 4;

const int EM_UNDERFLOW = 2;

const int EM_INEXACT = 1;

const int MCW_IC = 262144;

const int IC_AFFINE = 262144;

const int IC_PROJECTIVE = 0;

const int MCW_RC = 768;

const int RC_CHOP = 768;

const int RC_UP = 512;

const int RC_DOWN = 256;

const int RC_NEAR = 0;

const int MCW_PC = 196608;

const int PC_24 = 131072;

const int PC_53 = 65536;

const int PC_64 = 0;

const int CW_DEFAULT = 524319;

const int SW_INVALID = 16;

const int SW_DENORMAL = 524288;

const int SW_ZERODIVIDE = 8;

const int SW_OVERFLOW = 4;

const int SW_UNDERFLOW = 2;

const int SW_INEXACT = 1;

const int SW_UNEMULATED = 64;

const int SW_SQRTNEG = 128;

const int SW_STACKOVERFLOW = 512;

const int SW_STACKUNDERFLOW = 1024;

const int FPE_INVALID = 129;

const int FPE_DENORMAL = 130;

const int FPE_ZERODIVIDE = 131;

const int FPE_OVERFLOW = 132;

const int FPE_UNDERFLOW = 133;

const int FPE_INEXACT = 134;

const int FPE_UNEMULATED = 135;

const int FPE_SQRTNEG = 136;

const int FPE_STACKOVERFLOW = 138;

const int FPE_STACKUNDERFLOW = 139;

const int FPE_EXPLICITGEN = 140;

const int __FAVOR_ATOM = 0;

const int __FAVOR_ENFSTRG = 1;

const int CLOCKS_PER_SEC = 1000;

const int TIME_UTC = 1;

const int CLK_TCK = 1000;

const int _Mtx_internal_imp_size = 80;

const int _Mtx_internal_imp_alignment = 8;

const int _Cnd_internal_imp_size = 72;

const int _Cnd_internal_imp_alignment = 8;

const int ATOMIC_BOOL_LOCK_FREE = 2;

const int ATOMIC_CHAR_LOCK_FREE = 2;

const int ATOMIC_CHAR16_T_LOCK_FREE = 2;

const int ATOMIC_CHAR32_T_LOCK_FREE = 2;

const int ATOMIC_WCHAR_T_LOCK_FREE = 2;

const int ATOMIC_SHORT_LOCK_FREE = 2;

const int ATOMIC_INT_LOCK_FREE = 2;

const int ATOMIC_LONG_LOCK_FREE = 2;

const int ATOMIC_LLONG_LOCK_FREE = 2;

const int ATOMIC_POINTER_LOCK_FREE = 2;

const int LC_ALL = 0;

const int LC_COLLATE = 1;

const int LC_CTYPE = 2;

const int LC_MONETARY = 3;

const int LC_NUMERIC = 4;

const int LC_TIME = 5;

const int LC_MIN = 0;

const int LC_MAX = 5;

const int _ENABLE_PER_THREAD_LOCALE = 1;

const int _DISABLE_PER_THREAD_LOCALE = 2;

const int _ENABLE_PER_THREAD_LOCALE_GLOBAL = 16;

const int _DISABLE_PER_THREAD_LOCALE_GLOBAL = 32;

const int _ENABLE_PER_THREAD_LOCALE_NEW = 256;

const int _DISABLE_PER_THREAD_LOCALE_NEW = 512;

const int _X_ALL = 0;

const int _X_COLLATE = 1;

const int _X_CTYPE = 2;

const int _X_MONETARY = 3;

const int _X_NUMERIC = 4;

const int _X_TIME = 5;

const int _X_MAX = 5;

const int _X_MESSAGES = 6;

const int _NCAT = 7;

const int _M_COLLATE = 1;

const int _M_CTYPE = 2;

const int _M_MONETARY = 4;

const int _M_NUMERIC = 8;

const int _M_TIME = 16;

const int _M_MESSAGES = 32;

const int _M_ALL = 63;
